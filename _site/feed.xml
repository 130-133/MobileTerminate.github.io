<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leo's Freedom House</title>
    <description>About Tech,Thought,Feelings...
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Nov 2018 17:48:32 +0800</pubDate>
    <lastBuildDate>Tue, 06 Nov 2018 17:48:32 +0800</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>架构师技术路线整理</title>
        <description>&lt;p&gt;&lt;strong&gt;待补充&lt;/strong&gt;
You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Nov 2018 11:09:47 +0800</pubDate>
        <link>http://localhost:4000/posts/tech-line/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/tech-line/</guid>
        
        <category>技术路线</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>open-falcon 架构</title>
        <description>&lt;p&gt;公司最近要用小米的&lt;code class=&quot;highlighter-rouge&quot;&gt;open-falcon&lt;/code&gt;做监控，今天对其架构进行了一番了解。
&lt;img src=&quot;/assets/images/open_falcon.png&quot; alt=&quot;open_falcon_structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;基本组成模块&quot;&gt;基本组成模块：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;falcon-agent:&lt;strong&gt;数据采集组件&lt;/strong&gt;。接收客户端用户数据上报，上报给transfer处理程序。&lt;/li&gt;
  &lt;li&gt;transfer:&lt;strong&gt;数据中转模块&lt;/strong&gt;。负责将agent发来的数据转发到judge和graph。&lt;/li&gt;
  &lt;li&gt;judge:&lt;strong&gt;告警判断模块&lt;/strong&gt;。根据规则判定收到的数据是否达到报警阈值，若达到则触发报警。&lt;/li&gt;
  &lt;li&gt;alarm:&lt;strong&gt;告警模块&lt;/strong&gt;。发出各种渠道的报警消息。&lt;/li&gt;
  &lt;li&gt;graph:&lt;strong&gt;数据存储模块&lt;/strong&gt;。上报数据的存储、归档。并提供查询接口&lt;/li&gt;
  &lt;li&gt;query:&lt;strong&gt;查询模块&lt;/strong&gt;。给外部提供查询graph中的http接口。&lt;/li&gt;
  &lt;li&gt;dashboard:&lt;strong&gt;前端查询管理页面&lt;/strong&gt;，通过query提供的几口查询上报数据。&lt;/li&gt;
  &lt;li&gt;web portal:&lt;strong&gt;配置告警策略模块&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;heartbeat server:提供心跳服务及策略缓存。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;数据上报及处理流程&quot;&gt;数据上报及处理流程：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;客户端通过http上报数据给agent&lt;/li&gt;
  &lt;li&gt;agent接收到客户端上报的数据，并通过长连接将数据上报给transfer&lt;/li&gt;
  &lt;li&gt;transfer将收到的数据分别转发给judge集群和graph集群，使用一致性hash做数据分片，一个judge实例或一个graph实例值处理一部分数据&lt;/li&gt;
  &lt;li&gt;如果judge中判定到了需要告警的事件，则会将该事件推入Redis队列&lt;/li&gt;
  &lt;li&gt;alarm从Redis队列中取告警事件，将告警消息发送给对应渠道&lt;/li&gt;
  &lt;li&gt;graph将收到的数据存储并归档，其提供查询接口给query模块&lt;/li&gt;
  &lt;li&gt;query模块提供外部接口给web前端的dashboard，用于查询graph中存储的上报数据&lt;/li&gt;
  &lt;li&gt;web portal模块用于配置监控策略，并将策略存储到数据库中&lt;/li&gt;
  &lt;li&gt;heartbeat server为心跳服务器，agent每分钟都会发送心跳给heartbeat server，并上报自己的版本，hostname，ip等信息。&lt;/li&gt;
  &lt;li&gt;agent需要获取监控策略中的插件、特殊采集项、IP白名单下发等数据，judge集群在每次进行告警判定的时候也需要从监控策略中拉取判定条件。由于judge实例可能比较多，如果每次都去连接web portal db的话会给db造成比较大的压力。因为agent是通过heartbeat server去web portal db中去获取数据的，因此将heartbeat server作为了web portal db的一层cache，使得judge每次进行告警判定的时候都从heartbeat server获取告警策略，极大的减轻db的压力。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上就是open-falcon的整体架构啦。
附上&lt;a href=&quot;https://www.jikexueyuan.com/course/1651_1.html?ss=1&quot;&gt;官方视频教程链接&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，由于官方给出的搭建open-falcon的文档有一些坑，故此给出笔者验证过可用的&lt;a href=&quot;https://www.cnblogs.com/straycats/p/7199209.html&quot;&gt;open-falcon搭建教程&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Nov 2018 11:09:47 +0800</pubDate>
        <link>http://localhost:4000/posts/open-falcon-structure/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/open-falcon-structure/</guid>
        
        <category>open-falcon</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
